// Mocks generated by Mockito 5.0.0-nullsafety.7 from annotations
// in charts_common/test/chart/bar/bar_target_line_renderer_test.dart.
// Do not manually edit this file.

import 'dart:collection' as _i19;
import 'dart:math' as _i11;

import 'package:charts_common/src/chart/cartesian/axis/axis.dart' as _i7;
import 'package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart'
    as _i18;
import 'package:charts_common/src/chart/cartesian/cartesian_chart.dart' as _i17;
import 'package:charts_common/src/chart/common/base_chart.dart' as _i23;
import 'package:charts_common/src/chart/common/behavior/a11y/a11y_node.dart'
    as _i16;
import 'package:charts_common/src/chart/common/behavior/chart_behavior.dart'
    as _i9;
import 'package:charts_common/src/chart/common/canvas_shapes.dart' as _i13;
import 'package:charts_common/src/chart/common/chart_canvas.dart' as _i10;
import 'package:charts_common/src/chart/common/chart_context.dart' as _i15;
import 'package:charts_common/src/chart/common/datum_details.dart' as _i21;
import 'package:charts_common/src/chart/common/processed_series.dart' as _i8;
import 'package:charts_common/src/chart/common/selection_model/selection_model.dart'
    as _i22;
import 'package:charts_common/src/chart/common/series_renderer.dart' as _i6;
import 'package:charts_common/src/common/color.dart' as _i12;
import 'package:charts_common/src/common/date_time_factory.dart' as _i4;
import 'package:charts_common/src/common/graphics_factory.dart' as _i2;
import 'package:charts_common/src/common/proxy_gesture_listener.dart' as _i5;
import 'package:charts_common/src/common/rtl_spec.dart' as _i3;
import 'package:charts_common/src/common/text_element.dart' as _i14;
import 'package:charts_common/src/data/series.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeGraphicsFactory extends _i1.Fake implements _i2.GraphicsFactory {}

class _FakeRTLSpec extends _i1.Fake implements _i3.RTLSpec {}

class _FakeDateTimeFactory extends _i1.Fake implements _i4.DateTimeFactory {}

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeProxyGestureListener extends _i1.Fake
    implements _i5.ProxyGestureListener {}

class _FakeSeriesRenderer<D> extends _i1.Fake implements _i6.SeriesRenderer<D> {
}

class _FakeAxis<D> extends _i1.Fake implements _i7.Axis<D> {}

class _FakeMutableSeries<D> extends _i1.Fake implements _i8.MutableSeries<D> {}

class _FakeChartBehavior<D> extends _i1.Fake implements _i9.ChartBehavior<D> {}

/// A class which mocks [ChartCanvas].
///
/// See the documentation for Mockito's code generation for more information.
class MockChartCanvas extends _i1.Mock implements _i10.ChartCanvas {
  MockChartCanvas() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GraphicsFactory get graphicsFactory =>
      (super.noSuchMethod(Invocation.getter(#graphicsFactory),
          returnValue: _FakeGraphicsFactory()) as _i2.GraphicsFactory);
  @override
  void drawCircleSector(_i11.Point<num>? center, double? radius,
          double? innerRadius, double? startAngle, double? endAngle,
          {_i12.Color? fill, _i12.Color? stroke, double? strokeWidthPx}) =>
      super.noSuchMethod(
          Invocation.method(
              #drawCircleSector,
              [center, radius, innerRadius, startAngle, endAngle],
              {#fill: fill, #stroke: stroke, #strokeWidthPx: strokeWidthPx}),
          returnValueForMissingStub: null);
  @override
  void drawPie(_i13.CanvasPie? canvasPie) =>
      super.noSuchMethod(Invocation.method(#drawPie, [canvasPie]),
          returnValueForMissingStub: null);
  @override
  void drawBarStack(_i13.CanvasBarStack? canvasBarStack,
          {_i11.Rectangle<num>? drawAreaBounds}) =>
      super.noSuchMethod(
          Invocation.method(#drawBarStack, [canvasBarStack],
              {#drawAreaBounds: drawAreaBounds}),
          returnValueForMissingStub: null);
  @override
  void drawText(_i14.TextElement? textElement, int? offsetX, int? offsetY,
          {double? rotation = 0.0}) =>
      super.noSuchMethod(
          Invocation.method(#drawText, [textElement, offsetX, offsetY],
              {#rotation: rotation}),
          returnValueForMissingStub: null);
  @override
  void setClipBounds(_i11.Rectangle<int>? clipBounds) =>
      super.noSuchMethod(Invocation.method(#setClipBounds, [clipBounds]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ChartContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockChartContext extends _i1.Mock implements _i15.ChartContext {
  MockChartContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get chartContainerIsRtl =>
      (super.noSuchMethod(Invocation.getter(#chartContainerIsRtl),
          returnValue: false) as bool);
  @override
  _i3.RTLSpec get rtlSpec => (super.noSuchMethod(Invocation.getter(#rtlSpec),
      returnValue: _FakeRTLSpec()) as _i3.RTLSpec);
  @override
  bool get isRtl =>
      (super.noSuchMethod(Invocation.getter(#isRtl), returnValue: false)
          as bool);
  @override
  bool get isTappable =>
      (super.noSuchMethod(Invocation.getter(#isTappable), returnValue: false)
          as bool);
  @override
  double get pixelsPerDp =>
      (super.noSuchMethod(Invocation.getter(#pixelsPerDp), returnValue: 0.0)
          as double);
  @override
  _i4.DateTimeFactory get dateTimeFactory =>
      (super.noSuchMethod(Invocation.getter(#dateTimeFactory),
          returnValue: _FakeDateTimeFactory()) as _i4.DateTimeFactory);
  @override
  void requestAnimation(Duration? transition) =>
      super.noSuchMethod(Invocation.method(#requestAnimation, [transition]),
          returnValueForMissingStub: null);
  @override
  void enableA11yExploreMode(List<_i16.A11yNode>? nodes,
          {String? announcement}) =>
      super.noSuchMethod(
          Invocation.method(
              #enableA11yExploreMode, [nodes], {#announcement: announcement}),
          returnValueForMissingStub: null);
}

/// A class which mocks [CartesianChart].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartesianChart<D> extends _i1.Mock implements _i17.CartesianChart<D> {
  MockCartesianChart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get vertical =>
      (super.noSuchMethod(Invocation.getter(#vertical), returnValue: false)
          as bool);
  @override
  set vertical(bool? _vertical) =>
      super.noSuchMethod(Invocation.setter(#vertical, _vertical),
          returnValueForMissingStub: null);
  @override
  bool get flipVerticalAxisOutput =>
      (super.noSuchMethod(Invocation.getter(#flipVerticalAxisOutput),
          returnValue: false) as bool);
  @override
  set flipVerticalAxisOutput(bool? _flipVerticalAxisOutput) =>
      super.noSuchMethod(
          Invocation.setter(#flipVerticalAxisOutput, _flipVerticalAxisOutput),
          returnValueForMissingStub: null);
  @override
  set domainAxisSpec(_i18.AxisSpec<dynamic>? axisSpec) =>
      super.noSuchMethod(Invocation.setter(#domainAxisSpec, axisSpec),
          returnValueForMissingStub: null);
  @override
  set primaryMeasureAxisSpec(_i18.AxisSpec<dynamic>? axisSpec) =>
      super.noSuchMethod(Invocation.setter(#primaryMeasureAxisSpec, axisSpec),
          returnValueForMissingStub: null);
  @override
  set secondaryMeasureAxisSpec(_i18.AxisSpec<dynamic>? axisSpec) =>
      super.noSuchMethod(Invocation.setter(#secondaryMeasureAxisSpec, axisSpec),
          returnValueForMissingStub: null);
  @override
  set disjointMeasureAxisSpecs(
          _i19.LinkedHashMap<String, _i18.AxisSpec<dynamic>>? axisSpecs) =>
      super.noSuchMethod(
          Invocation.setter(#disjointMeasureAxisSpecs, axisSpecs),
          returnValueForMissingStub: null);
  @override
  Duration get transition => (super.noSuchMethod(Invocation.getter(#transition),
      returnValue: _FakeDuration()) as Duration);
  @override
  set transition(Duration? _transition) =>
      super.noSuchMethod(Invocation.setter(#transition, _transition),
          returnValueForMissingStub: null);
  @override
  bool get isTappable =>
      (super.noSuchMethod(Invocation.getter(#isTappable), returnValue: false)
          as bool);
  @override
  bool get selectNearestByDomain =>
      (super.noSuchMethod(Invocation.getter(#selectNearestByDomain),
          returnValue: false) as bool);
  @override
  _i5.ProxyGestureListener get gestureProxy => (super.noSuchMethod(
      Invocation.getter(#gestureProxy),
      returnValue: _FakeProxyGestureListener()) as _i5.ProxyGestureListener);
  @override
  set defaultRenderer(_i6.SeriesRenderer<D>? renderer) =>
      super.noSuchMethod(Invocation.setter(#defaultRenderer, renderer),
          returnValueForMissingStub: null);
  @override
  _i6.SeriesRenderer<D> get defaultRenderer =>
      (super.noSuchMethod(Invocation.getter(#defaultRenderer),
          returnValue: _FakeSeriesRenderer<D>()) as _i6.SeriesRenderer<D>);
  @override
  List<_i9.ChartBehavior<D>> get behaviors =>
      (super.noSuchMethod(Invocation.getter(#behaviors),
          returnValue: <_i9.ChartBehavior<D>>[]) as List<_i9.ChartBehavior<D>>);
  @override
  bool get animatingThisDraw =>
      (super.noSuchMethod(Invocation.getter(#animatingThisDraw),
          returnValue: false) as bool);
  @override
  void init(_i15.ChartContext? context, _i2.GraphicsFactory? graphicsFactory) =>
      super.noSuchMethod(Invocation.method(#init, [context, graphicsFactory]),
          returnValueForMissingStub: null);
  @override
  _i7.Axis<D?>? createDomainAxisFromSpec(_i18.AxisSpec<D?>? axisSpec) =>
      (super.noSuchMethod(
              Invocation.method(#createDomainAxisFromSpec, [axisSpec]))
          as _i7.Axis<D?>?);
  @override
  _i7.Axis<dynamic> getMeasureAxis({String? axisId}) => (super.noSuchMethod(
      Invocation.method(#getMeasureAxis, [], {#axisId: axisId}),
      returnValue: _FakeAxis<dynamic>()) as _i7.Axis<dynamic>);
  @override
  _i8.MutableSeries<D> makeSeries(_i20.Series<dynamic, D>? series) =>
      (super.noSuchMethod(Invocation.method(#makeSeries, [series]),
          returnValue: _FakeMutableSeries<D>()) as _i8.MutableSeries<D>);
  @override
  _i6.SeriesRenderer<D> makeDefaultRenderer() =>
      (super.noSuchMethod(Invocation.method(#makeDefaultRenderer, []),
          returnValue: _FakeSeriesRenderer<D>()) as _i6.SeriesRenderer<D>);
  @override
  Map<String?, List<_i8.MutableSeries<D>>> preprocessSeries(
          List<_i8.MutableSeries<D>>? seriesList) =>
      (super.noSuchMethod(Invocation.method(#preprocessSeries, [seriesList]),
              returnValue: <String?, List<_i8.MutableSeries<D>>>{})
          as Map<String?, List<_i8.MutableSeries<D>>>);
  @override
  void onPostLayout(
          Map<String?, List<_i8.MutableSeries<D>>>? rendererToSeriesList) =>
      super.noSuchMethod(
          Invocation.method(#onPostLayout, [rendererToSeriesList]),
          returnValueForMissingStub: null);
  @override
  List<_i21.DatumDetails<D>?> getDatumDetails(_i22.SelectionModelType? type) =>
      (super.noSuchMethod(Invocation.method(#getDatumDetails, [type]),
              returnValue: <_i21.DatumDetails<D>?>[])
          as List<_i21.DatumDetails<D>?>);
  @override
  bool removeLifecycleListener(_i23.LifecycleListener<D>? listener) => (super
      .noSuchMethod(Invocation.method(#removeLifecycleListener, [listener]),
          returnValue: false) as bool);
  @override
  void addSeriesRenderer(_i6.SeriesRenderer<D>? renderer) =>
      super.noSuchMethod(Invocation.method(#addSeriesRenderer, [renderer]),
          returnValueForMissingStub: null);
  @override
  bool pointWithinRenderer(_i11.Point<double>? chartPosition) => (super
      .noSuchMethod(Invocation.method(#pointWithinRenderer, [chartPosition]),
          returnValue: false) as bool);
  @override
  List<_i21.DatumDetails<D>> getNearestDatumDetailPerSeries(
          _i11.Point<double>? drawAreaPoint,
          bool? selectAcrossAllDrawAreaComponents) =>
      (super.noSuchMethod(
          Invocation.method(#getNearestDatumDetailPerSeries,
              [drawAreaPoint, selectAcrossAllDrawAreaComponents]),
          returnValue: <_i21.DatumDetails<D>>[]) as List<_i21.DatumDetails<D>>);
  @override
  List<_i21.DatumDetails<D?>?> getSelectedDatumDetails(
          _i22.SelectionModelType? selectionModelType) =>
      (super.noSuchMethod(
              Invocation.method(#getSelectedDatumDetails, [selectionModelType]),
              returnValue: <_i21.DatumDetails<D?>?>[])
          as List<_i21.DatumDetails<D?>?>);
  @override
  List<_i21.DatumDetails<D?>?> getAllDatumDetails(
          {bool? includeOverlaySeries = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllDatumDetails, [],
                  {#includeOverlaySeries: includeOverlaySeries}),
              returnValue: <_i21.DatumDetails<D?>?>[])
          as List<_i21.DatumDetails<D?>?>);
  @override
  _i9.ChartBehavior<D> createBehavior(_i23.BehaviorCreator<D>? creator) =>
      (super.noSuchMethod(Invocation.method(#createBehavior, [creator]),
          returnValue: _FakeChartBehavior<D>()) as _i9.ChartBehavior<D>);
  @override
  void addBehavior(_i9.ChartBehavior<D>? behavior) =>
      super.noSuchMethod(Invocation.method(#addBehavior, [behavior]),
          returnValueForMissingStub: null);
  @override
  bool removeBehavior(_i9.ChartBehavior<D>? behavior) =>
      (super.noSuchMethod(Invocation.method(#removeBehavior, [behavior]),
          returnValue: false) as bool);
  @override
  void registerTappable(_i9.ChartBehavior<D>? behavior) =>
      super.noSuchMethod(Invocation.method(#registerTappable, [behavior]),
          returnValueForMissingStub: null);
  @override
  void unregisterTappable(_i9.ChartBehavior<D>? behavior) =>
      super.noSuchMethod(Invocation.method(#unregisterTappable, [behavior]),
          returnValueForMissingStub: null);
  @override
  void measure(int? width, int? height) =>
      super.noSuchMethod(Invocation.method(#measure, [width, height]),
          returnValueForMissingStub: null);
  @override
  bool withinDrawArea(_i11.Point<num>? point) =>
      (super.noSuchMethod(Invocation.method(#withinDrawArea, [point]),
          returnValue: false) as bool);
  @override
  void draw(List<_i20.Series<dynamic, D>>? seriesList) =>
      super.noSuchMethod(Invocation.method(#draw, [seriesList]),
          returnValueForMissingStub: null);
  @override
  void redraw({bool? skipAnimation = false, bool? skipLayout = false}) =>
      super.noSuchMethod(
          Invocation.method(#redraw, [],
              {#skipAnimation: skipAnimation, #skipLayout: skipLayout}),
          returnValueForMissingStub: null);
  @override
  void drawInternal(List<_i8.MutableSeries<D>>? seriesList,
          {bool? skipAnimation, bool? skipLayout}) =>
      super.noSuchMethod(
          Invocation.method(#drawInternal, [seriesList],
              {#skipAnimation: skipAnimation, #skipLayout: skipLayout}),
          returnValueForMissingStub: null);
  @override
  void configureSeries(List<_i8.MutableSeries<D>>? seriesList) =>
      super.noSuchMethod(Invocation.method(#configureSeries, [seriesList]),
          returnValueForMissingStub: null);
  @override
  void paint(_i10.ChartCanvas? canvas) =>
      super.noSuchMethod(Invocation.method(#paint, [canvas]),
          returnValueForMissingStub: null);
  @override
  void fireOnDraw(List<_i8.MutableSeries<D>>? seriesList) =>
      super.noSuchMethod(Invocation.method(#fireOnDraw, [seriesList]),
          returnValueForMissingStub: null);
  @override
  void fireOnPreprocess(List<_i8.MutableSeries<D>>? seriesList) =>
      super.noSuchMethod(Invocation.method(#fireOnPreprocess, [seriesList]),
          returnValueForMissingStub: null);
  @override
  void fireOnPostprocess(List<_i8.MutableSeries<D>>? seriesList) =>
      super.noSuchMethod(Invocation.method(#fireOnPostprocess, [seriesList]),
          returnValueForMissingStub: null);
  @override
  void fireOnPostrender(_i10.ChartCanvas? canvas) =>
      super.noSuchMethod(Invocation.method(#fireOnPostrender, [canvas]),
          returnValueForMissingStub: null);
}
