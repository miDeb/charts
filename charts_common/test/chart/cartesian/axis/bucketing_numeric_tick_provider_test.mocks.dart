// Mocks generated by Mockito 5.0.0-nullsafety.7 from annotations
// in charts_common/test/chart/cartesian/axis/bucketing_numeric_tick_provider_test.dart.
// Do not manually edit this file.

import 'package:charts_common/src/chart/cartesian/axis/numeric_extents.dart'
    as _i2;
import 'package:charts_common/src/chart/cartesian/axis/numeric_scale.dart'
    as _i4;
import 'package:charts_common/src/chart/cartesian/axis/scale.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeNumericExtents extends _i1.Fake implements _i2.NumericExtents {}

class _FakeStepSizeConfig extends _i1.Fake implements _i3.StepSizeConfig {}

class _FakeRangeBandConfig extends _i1.Fake implements _i3.RangeBandConfig {}

class _FakeMutableScale<D> extends _i1.Fake implements _i3.MutableScale<D> {}

/// A class which mocks [NumericScale].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumericScale extends _i1.Mock implements _i4.NumericScale {
  MockNumericScale() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get keepViewportWithinData =>
      (super.noSuchMethod(Invocation.getter(#keepViewportWithinData),
          returnValue: false) as bool);
  @override
  set keepViewportWithinData(bool? keep) =>
      super.noSuchMethod(Invocation.setter(#keepViewportWithinData, keep),
          returnValueForMissingStub: null);
  @override
  _i2.NumericExtents get dataExtent =>
      (super.noSuchMethod(Invocation.getter(#dataExtent),
          returnValue: _FakeNumericExtents()) as _i2.NumericExtents);
  @override
  num get minimumDomainStep =>
      (super.noSuchMethod(Invocation.getter(#minimumDomainStep), returnValue: 0)
          as num);
  @override
  set rangeBandConfig(_i3.RangeBandConfig? barGroupWidthConfig) => super
      .noSuchMethod(Invocation.setter(#rangeBandConfig, barGroupWidthConfig),
          returnValueForMissingStub: null);
  @override
  _i3.StepSizeConfig get stepSizeConfig =>
      (super.noSuchMethod(Invocation.getter(#stepSizeConfig),
          returnValue: _FakeStepSizeConfig()) as _i3.StepSizeConfig);
  @override
  set stepSizeConfig(_i3.StepSizeConfig? config) =>
      super.noSuchMethod(Invocation.setter(#stepSizeConfig, config),
          returnValueForMissingStub: null);
  @override
  int get rangeWidth =>
      (super.noSuchMethod(Invocation.getter(#rangeWidth), returnValue: 0)
          as int);
  @override
  _i3.RangeBandConfig get rangeBandConfig =>
      (super.noSuchMethod(Invocation.getter(#rangeBandConfig),
          returnValue: _FakeRangeBandConfig()) as _i3.RangeBandConfig);
  @override
  double get domainStepSize =>
      (super.noSuchMethod(Invocation.getter(#domainStepSize), returnValue: 0.0)
          as double);
  @override
  double computeViewportScaleFactor(double? domainWindow) =>
      (super.noSuchMethod(
          Invocation.method(#computeViewportScaleFactor, [domainWindow]),
          returnValue: 0.0) as double);
  @override
  void addDomain(num? domainValue) =>
      super.noSuchMethod(Invocation.method(#addDomain, [domainValue]),
          returnValueForMissingStub: null);
  @override
  num operator [](num? domainValue) =>
      (super.noSuchMethod(Invocation.method(#[], [domainValue]), returnValue: 0)
          as num);
  @override
  num reverse(double? pixelLocation) =>
      (super.noSuchMethod(Invocation.method(#reverse, [pixelLocation]),
          returnValue: 0) as num);
  @override
  bool canTranslate(num? domainValue) =>
      (super.noSuchMethod(Invocation.method(#canTranslate, [domainValue]),
          returnValue: false) as bool);
  @override
  int compareDomainValueToViewport(num? domainValue) => (super.noSuchMethod(
      Invocation.method(#compareDomainValueToViewport, [domainValue]),
      returnValue: 0) as int);
  @override
  bool isRangeValueWithinViewport(double? rangeValue) => (super.noSuchMethod(
      Invocation.method(#isRangeValueWithinViewport, [rangeValue]),
      returnValue: false) as bool);
  @override
  _i3.MutableScale<num> copy() =>
      (super.noSuchMethod(Invocation.method(#copy, []),
          returnValue: _FakeMutableScale<num>()) as _i3.MutableScale<num>);
}
